generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}
  
model Profile {
  id String @id @default(uuid())
  userId String @unique
  
  username String @db.Text
  imageUrl String @db.Text
  email String @db.Text

  conversationInitiated Conversation[] @relation("ProfileOne")
  conversationReceived Conversation[] @relation("ProfileTwo")

  communities Community[]
  members Member[]
  channels Channel[]
  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updated DateTime @updatedAt
}

model Community {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  communityId String
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  posts Post[]
  replies Reply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([communityId])
}

enum ChannelType {
  Text
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(Text)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  communityId String
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  posts Post[]

  createdAt DateTime @default(now())
  updated DateTime @updatedAt

  @@index([profileId])
  @@index([communityId])
}

model Post {
  id String @id @default(uuid())

  title String @db.Text
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  replies Reply[]

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Reply {
  id String @id @default(uuid())
  content String @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([postId])
}

model Conversation {
  id String @id @default(uuid())

  profileOneId String
  profileOne Profile @relation("ProfileOne", fields: [profileOneId], references: [id], onDelete: Cascade)

  profileTwoId String
  profileTwo Profile @relation("ProfileTwo", fields: [profileTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([profileOneId])
  @@index([profileTwoId])
  @@unique([profileOneId, profileTwoId])
}

model DirectMessage {
  id String @id @default(uuid())

  content String @db.Text
  fileUrl String? @db.Text

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([profileId])
  @@index([conversationId])
}